import asyncio
import random

from utils.sort import SortOrderEnum, SortPredicateEnum, sort_by
from utils.scan import Vulnerability, process_scan_results
from utils.fetch import get_timeout
from pprint import pprint

async def main() -> None:
  try:
    data_sources: list[str] = [
      "./mocks/network-vulnerabilities.mock.json",
      "./mocks/server-vulnerabilities.mock.json",
      "./mocks/workstation-vulnerabilities.mock.json"
    ]
    
    results: list[dict] = await asyncio.gather(*[get_timeout(data_source, random.uniform(0.1, 1)) for data_source in data_sources])
    processed_scan: dict[list[Vulnerability]] = await process_scan_results(results)
    pprint(processed_scan)

    sorted_scan_by_severity: list = await sort_by(processed_scan['vulnerabilities'], SortPredicateEnum.SEVERITY)
    pprint(sorted_scan_by_severity)

    sorted_scan_by_asset_type: list = await sort_by(processed_scan['vulnerabilities'], SortPredicateEnum.ASSET_TYPE, SortOrderEnum.ASC)
    pprint(sorted_scan_by_asset_type)
  except Exception as e:
    pprint(e)

asyncio.run(main())