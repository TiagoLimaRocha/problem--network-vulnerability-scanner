import asyncio
import aiofiles
import json

from exceptions.not_found_exception import NotFoundException
from exceptions.timeout_exception import TimeoutException

TIMEOUT_S: float = 1

async def get(data_source: str, latency_s: float | int) -> dict:
  try:
    await asyncio.sleep(latency_s)
    async with aiofiles.open(data_source) as f:
      data: str = await f.read()
    if not data:
      raise NotFoundException(f"Data not found in {data_source}")
    return json.loads(data)
  except Exception as e:
    raise NotFoundException(f"File not found: {data_source}") from e

async def get_timeout(data_source: str, latency_s: float | int) -> dict:
    return await asyncio.wait_for(get(data_source, latency_s), TIMEOUT_S)
