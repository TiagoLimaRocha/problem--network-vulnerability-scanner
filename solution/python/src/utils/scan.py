from enum import Enum

class SeverityEnum(Enum):
  LOW = 1
  MEDIUM = 2
  HIGH = 3
  CRITICAL = 4

  __gt__ = lambda self, other: self.value > other.value
  __lt__: lambda self, other: self.value < other.value

class Vulnerability:
  def __init__(self, id:str, severity_score: SeverityEnum, asset_type: str = "", severity: str = "", description:str = "") -> None:
    self.id: str = id
    self.asset_type: str = asset_type
    self.severity: str = severity
    self.description: str = description
    self.severity_score: SeverityEnum = severity_score
  
  def __str__(self) -> str:
    return "{" + f"id:{self.id}, asset_type:{self.asset_type}, severity:{self.severity}, description:{self.description}" + "}"

  __repr__ = __str__

def calculate_severity_score(severity) -> SeverityEnum:
  match severity:
    case "Low":
      return SeverityEnum.LOW
    case "Medium":
      return SeverityEnum.MEDIUM
    case "High":
      return SeverityEnum.HIGH
    case "Critical":
      return SeverityEnum.CRITICAL
    case _:
      return SeverityEnum.LOW

async def process_scan_results(results: list[dict]) -> dict[list[Vulnerability]]:
  processed_results: dict = {}
  scanned_vulnerabilities: list[Vulnerability] = [
    Vulnerability(
      id=vulnerability['id'],
      severity_score=calculate_severity_score(vulnerability['severity']),
      asset_type=result['assetType'], 
      severity=vulnerability['severity'], 
      description=vulnerability['description']
    ) 
    for result in results
    for vulnerability in result['vulnerabilities']
  ]

  processed_results['vulnerabilities'] = scanned_vulnerabilities
  return processed_results