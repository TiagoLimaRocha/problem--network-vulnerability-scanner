from pprint import pprint

class Vulnerability:
  def __init__(self, id:str, asset_type: str = "", severity: str = "", description:str = "") -> None:
    self.id: str = id
    self.asset_type: str = asset_type
    self.severity: str = severity
    self.description: str = description
  
  def __str__(self) -> str:
    return "{" + f"id:{self.id}, asset_type:{self.asset_type}, severity:{self.severity}, description:{self.description}" + "}"

  __repr__ = __str__

async def process_scan_results(results: list[dict]) -> dict[list[Vulnerability]]:
  processed_results: dict = {}
  scanned_vulnerabilities: list[Vulnerability] = []

  for result in results:
    asset_type: str = result['assetType']
    vulnerabilities: list[dict] = result['vulnerabilities']

    for vulnerability in vulnerabilities:
      id: str = vulnerability['id']
      severity: str = vulnerability['severity']
      description: str = vulnerability['description']

      scanned = Vulnerability(id=id, asset_type=asset_type, severity=severity, description=description)
      scanned_vulnerabilities.append(scanned)

  processed_results['vulnerabilities'] = scanned_vulnerabilities
  return processed_results